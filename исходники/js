// Какое будет выведено значение: let x = 5; alert( x++ ); ?

// Выведет 5. Это задача на разницу между постфиксной и префиксной формой инкремента/ декремента.

// Чему равно такое выражение: [ ] + false - null + true ?

// NaN - Not a number.

// Пустой массив преобразуется в пустую строку.

// Далее идет сложение пустой строки и false - получается "false"

// Когда мы пытаемся от строки отнять что-то - выполняется математически неверная операция и мы получаем NaN

// Это задача на динамическую типизацию в JS (по простому - преобразование типов данных один в другой)

// Что выведет этот код: let y = 1; let x = y = 2; alert(x); ?

// Выведет 2.

// В этой части y = 2 мы присваиваем переменной y значение 2, а затем это же значение идет в переменную  x

// Чему равна сумма [ ] + 1 + 2?

// Выведет "12"

// Пустой массив превращается в пустую строку, а дальше при сложении числа со строкой - все преобразуется в тип данных строка.

// Что выведет этот код: alert( "1"[0] )?

// Выведет 1, так как это первый символ в этой строке.

// Чему равно 2 && 1 && null && 0 && undefined ?

// Выведет null, так как оператор И возвращает первое ложное значение.

// В логическом контексте в JS только 5 сущностей представляют собой неправду (false) - это 0, пустая строка "" , null , undefined , NaN

// Есть ли разница между выражениями? !!( a && b ) и (a && b)?

// Есть. !!  превращает любую конструкцию в Boolean тип данных

// Что выведет этот код: alert( null || 2 && 3 || 4 ); ?

// Выведет 3. Почему так? Мы разбиваем этот кусочек кода на 3 части.

// Слева, в операции ИЛИ - из двух частей вернет 2. ИЛИ возвращает всегда первое правдивое утверждение.

// Справа ИЛИ вернет 3.

// А оператор И сравнит 2 и 3 и вернет последнее - 3ку.

// a = [1, 2, 3]; b = [1, 2, 3]; Правда ли что a == b ?

// Нет. Это разные массивы, просто с одинаковыми значениями.

// Что выведет этот код: alert( +"Infinity" ); ?

// Вернет Infinity. Оператор + перед строкой превратит её в число.

// Верно ли сравнение: "Ёжик" > "яблоко"?

// Нет, так как в соответствии с unicode кодировкой ё стоит после я.

// Чему равно 0 || "" || 2 || undefined || true || falsе ?

// Вернет 2, так как это первое правдивое значение (true)